    const APP_ID = "YOUR-APP-ID";

    let uid = sessionStorage.getItem('uid');
    if (!uid) {
        uid = String(Math.floor(Math.random() * 10000));
        sessionStorage.setItem('uid', uid);
    }

let token = null;
let client;

let rtmClient;
let channel;

const queryString = window.location.search;
const urlParams = new URLSearchParams(queryString);
let roomId = urlParams.get('room');

if (!roomId) {
    roomId = 'main';
}

let displayName = sessionStorage.getItem('display_name');
if (!displayName) {
    window.location = 'lobby.html';
}

let localTracks = [];
let remoteUsers = {};

let localScreenTracks;
let sharingScreen = false;

let joinRoomInit = async () => {
    rtmClient = await AgoraRTM.createInstance(APP_ID);
    await rtmClient.login({uid, token});

    await rtmClient.addOrUpdateLocalUserAttributes({'name': displayName});

    channel = await rtmClient.createChannel(roomId);
    await channel.join();

    channel.on('MemberJoined', handleMemberJoined);
    channel.on('MemberLeft', handleMemberLeft);
    channel.on('ChannelMessage', handleChannelMessage);

    getMembers();
    addBotMessageToDom(`Welcome to the room ${displayName}! ðŸ‘‹`);

    client = AgoraRTC.createClient({mode: 'rtc', codec: 'vp8'});
    await client.join(APP_ID, roomId, token, uid);

    client.on('user-published', handleUserPublished);
    client.on('user-left', handleUserLeft);
};

let joinStream = async () => {
    console.log('Joining stream...'); // Check if this logs when the button is clicked
    document.getElementById('join-btn').style.display = 'none';
    document.getElementsByClassName('stream__actions')[0].style.display = 'flex';

    try {
        localTracks = await AgoraRTC.createMicrophoneAndCameraTracks({}, {
            encoderConfig: {
                width: {min: 640, ideal: 1920, max: 1920},
                height: {min: 480, ideal: 1080, max: 1080}
            }
        });

        let player = `<div class="video__container" id="user-container-${uid}">
                        <div class="video-player" id="user-${uid}"></div>
                      </div>`;

        document.getElementById('streams__container').insertAdjacentHTML('beforeend', player);
        document.getElementById(`user-container-${uid}`).addEventListener('click', expandVideoFrame);

        localTracks[1].play(`user-${uid}`);
        await client.publish(localTracks);
        console.log('Stream joined and published.');
    } catch (error) {
        console.error('Failed to join the stream:', error);
    }
};


let handleUserPublished = async (user, mediaType) => {
    remoteUsers[user.uid] = user;

    await client.subscribe(user, mediaType);

    if (!document.getElementById(`user-container-${user.uid}`)) {
        let player = `<div class="video__container" id="user-container-${user.uid}">
                        <div class="video-player" id="user-${user.uid}"></div>
                      </div>`;

        document.getElementById('streams__container').insertAdjacentHTML('beforeend', player);
        document.getElementById(`user-container-${user.uid}`).addEventListener('click', expandVideoFrame);
    }

    if (mediaType === 'video') {
        user.videoTrack.play(`user-${user.uid}`);
    }

    if (mediaType === 'audio') {
        user.audioTrack.play();
    }
};

let handleUserLeft = async (user) => {
    delete remoteUsers[user.uid];
    document.getElementById(`user-container-${user.uid}`)?.remove();
};

// Add all other functions like toggleMic, toggleCamera, toggleScreen, leaveStream here without changes

document.getElementById('camera-btn').addEventListener('click', toggleCamera);
document.getElementById('mic-btn').addEventListener('click', toggleMic);
document.getElementById('screen-btn').addEventListener('click', toggleScreen);
document.getElementById('join-btn').addEventListener('click', joinStream);
document.getElementById('leave-btn').addEventListener('click', leaveStream);

// Implement these functions based on your application's needs
function handleMemberJoined() { /* handle new member */ }
function handleMemberLeft() { /* handle member leaving */ }
function handleChannelMessage() { /* handle messages */ }
function getMembers() { /* list channel members */ }
function addBotMessageToDom(message) { /* display message */ }
function expandVideoFrame() { /* expand video frame */ }

joinRoomInit();








let handleUserLeft = async (user) =>  {
    delete remoteUser[user.uid];
    document.getElementById('user-container-${user.uid}')?.remove();

};


document.getElementId('cemera-btn').addEventListener('click', toggleCemera);
document.getElementById('mic-btn').addEventListener('click', toggleMic);
document.getElementById('screen-btn').addEventListener('click',togglescreen);
document.getElementById('join-btn').addEventListener('click', joinStream);
document.getElementById('leave-btn').addEventListener('click', leaveStream);


function handleMemberJoined() {-------}
function handleMemberLeft()  {----}
function handleChannelMessage() {----}
function getMembers() {--}
function addBotMessageToDom()   {------}
function expandVideoFrame()  {------}
